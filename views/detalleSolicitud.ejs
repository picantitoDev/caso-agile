<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Detalle de Solicitud</title>
    <link rel="stylesheet" href="/detalleSolicitud.css" />
    <style>
      .archivo-preview {
        display: flex;
        align-items: center;
        margin-top: 5px;
        gap: 10px;
      }

      .archivo-preview span {
        flex: 1;
      }

      .btn-eliminar {
        background-color: #e57373;
        border: none;
        color: white;
        cursor: pointer;
        padding: 4px 8px;
        border-radius: 4px;
      }

      .btn-eliminar:hover {
        background-color: #d32f2f;
      }

      .archivos-nuevos {
        margin-top: 10px;
      }

      .estado-evaluacion {
  background-color: #eee;
  padding: 10px;
  border-left: 4px solid #9c27b0;
  margin-top: 10px;
  border-radius: 5px;
}
    </style>
  </head>
  <body>
    <header>
      <h1>Detalle de Solicitud</h1>
      <div class="user-info">
        <span><%= user.username %> - <%= user.universidad %></span>
        <a href="/log-out" class="logout-btn">Cerrar sesión</a>
      </div>
    </header>

    <div class="container">
      <a class="back-btn" href="/user/home">← Atrás</a>
      <div style="color: white">asd</div>
      <form
        action="/user/solicitudes/<%= solicitudId %>/guardar-cambios"
        method="POST"
        enctype="multipart/form-data"
        id="formulario"
      >
        <% secciones.forEach(seccion => { %>
        <div class="seccion">
          <h2>
            <%= seccion.nombre .split(' ') .map(p => p.charAt(0).toUpperCase() +
            p.slice(1)) .join(' ') %>
          </h2>
          <% 
            const seccionData = archivosPorSeccion.find(a => a.seccion.id_seccion === seccion.id_seccion);
            const archivosSeccion = seccionData || { archivos: [] };
            const editable = seccionData?.editable;
          %>
          <% if
          (archivosSeccion && archivosSeccion.archivos.length > 0) { %>
          <div class="archivos-subidos">
            <h3>Archivos subidos:</h3>
            <ul>
              <% archivosSeccion.archivos.forEach(archivo => { %>
              <li>
                <%= archivo.nombre_archivo %>
                <% if (editable) { %>
                  <button
                    type="button"
                    class="btn-eliminar"
                    onclick="eliminarArchivo('<%= archivo.id_archivo %>')"
                  >
                    Eliminar
                  </button>
                <% } %>
              </li>
              <% }) %>
            </ul>
          </div>
          <% } else { %>
          <p>No se han subido archivos aún.</p>
          <% } %>

          <label for="archivo-<%= seccion.id_seccion %>"
            >Subir archivo(s):</label
          >
          <% if (editable) { %>
            <label for="archivo-<%= seccion.id_seccion %>">Subir archivo(s):</label>
            <input
              type="file"
              id="archivo-<%= seccion.id_seccion %>"
              name="archivos[<%= seccion.id_seccion %>][]"
              multiple
              accept=".pdf"
              data-id="<%= seccion.id_seccion %>"
              class="input-archivos"
            />
            <div id="preview-<%= seccion.id_seccion %>" class="archivos-nuevos"></div>
          <% } else { %>
            <p><em>Actualmente esta sección no está habilitada para subir archivos.</em></p>
          <% } %>

          <div
            id="preview-<%= seccion.id_seccion %>"
            class="archivos-nuevos"
          ></div>

          <% const evaluacion = evaluaciones.find(ev =>
              ev.id_seccion === seccion.id_seccion &&
              ev.id_solicitud == solicitudId
          ) || null; %>
        </div>
        <% }) %>
        <button type="submit">Guardar cambios</button>
      </form>
    </div>

<script>
  const archivosPorSeccion = new Map();

  document.querySelectorAll(".input-archivos").forEach((input) => {
    input.addEventListener("change", function () {
      const idSeccion = input.dataset.id;
      const nuevosArchivos = Array.from(input.files);

      // Obtener los archivos anteriores si existen
      const archivosAcumulados = archivosPorSeccion.get(idSeccion) || [];

      // Combinar los archivos nuevos con los anteriores (sin duplicados por nombre)
      const combinados = [...archivosAcumulados];

      nuevosArchivos.forEach((nuevo) => {
        // Evita duplicados por nombre
        if (!combinados.some((a) => a.name === nuevo.name)) {
          combinados.push(nuevo);
        }
      });

      // Guardar la lista combinada
      archivosPorSeccion.set(idSeccion, combinados);

      // Crear FileList artificial
      const dt = new DataTransfer();
      combinados.forEach((file) => dt.items.add(file));
      input.files = dt.files;

      // Actualizar vista previa
      actualizarPreview(idSeccion, input);
    });
  });

  function actualizarPreview(idSeccion, input) {
    const previewContainer = document.getElementById("preview-" + idSeccion);
    const archivos = archivosPorSeccion.get(idSeccion) || [];

    previewContainer.innerHTML = "";

    archivos.forEach((file, index) => {
      const div = document.createElement("div");
      div.classList.add("archivo-preview");

      const span = document.createElement("span");
      span.textContent = file.name;

      const btn = document.createElement("button");
      btn.textContent = "X";
      btn.classList.add("btn-eliminar");

      btn.addEventListener("click", () => {
        archivos.splice(index, 1);

        // Actualizar mapa
        archivosPorSeccion.set(idSeccion, archivos);

        // Crear nuevo objeto FileList sin el archivo eliminado
        const dt = new DataTransfer();
        archivos.forEach((f) => dt.items.add(f));
        input.files = dt.files;

        actualizarPreview(idSeccion, input);
      });

      div.appendChild(span);
      div.appendChild(btn);
      previewContainer.appendChild(div);
    });
  }

  function eliminarArchivo(idArchivo) {
    if (!confirm("¿Estás seguro de que deseas eliminar este archivo?")) return;

    fetch(
      `/user/solicitudes/<%= solicitudId %>/eliminar-archivo/${idArchivo}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      }
    )
      .then((res) => {
        if (!res.ok) throw new Error("Error al eliminar el archivo.");
        location.reload();
      })
      .catch((err) => {
        console.error(err);
        alert("Ocurrió un error al eliminar el archivo.");
      });
  }

  document
    .getElementById("formulario")
    .addEventListener("submit", function (e) {
      const inputs = document.querySelectorAll(".input-archivos");
      let hayArchivos = false;
      let archivosInvalidos = false;

      inputs.forEach((input) => {
        const files = Array.from(input.files);

        if (files.length > 0) {
          hayArchivos = true;

          files.forEach((file) => {
            if (file.type !== "application/pdf") {
              archivosInvalidos = true;
            }
          });
        }
      });

      if (!hayArchivos) {
        e.preventDefault();
        alert("Debes subir al menos un archivo antes de guardar los cambios.");
        return;
      }

      if (archivosInvalidos) {
        e.preventDefault();
        alert("Solo se permiten archivos PDF.");
        return;
      }
    });
</script>

  </body>
</html>
